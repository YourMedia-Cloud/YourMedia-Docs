name: Auto Move Issues & PRs in Project Board
on:
  issues:
    types: [opened, labeled]
  pull_request:
    types: [opened, review_requested, closed]

jobs:
  # Gestion des issues - Projet principal
  process-issues:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    steps:
      - name: Move issue to main project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: "https://github.com/orgs/YourMedia-Cloud/projects/1"
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}

  # Gestion des issues spécifiques à l'infrastructure
  process-infra-issues:
    needs: process-issues
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'infra')
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to Infrastructure project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: "https://github.com/orgs/YourMedia-Cloud/projects/2"
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}

  # Transfert des issues vers le bon dépôt en fonction du label
  transfer-issue:
    needs: process-issues
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Determine Target Repo
        id: repo-selector
        run: |
          LABELS="${{ toJSON(github.event.issue.labels.*.name) }}"
          if [[ "$LABELS" == *"infra"* ]]; then
            echo "repo_name=YourMedia-Infrastructure" >> $GITHUB_OUTPUT
          elif [[ "$LABELS" == *"api"* ]]; then
            echo "repo_name=YourMedia-API" >> $GITHUB_OUTPUT
          elif [[ "$LABELS" == *"mobile"* ]]; then
            echo "repo_name=YourMedia-Mobile" >> $GITHUB_OUTPUT
          elif [[ "$LABELS" == *"monitoring"* ]]; then
            echo "repo_name=YourMedia-Monitoring" >> $GITHUB_OUTPUT
          elif [[ "$LABELS" == *"ci-cd"* ]]; then
            echo "repo_name=YourMedia-CICD" >> $GITHUB_OUTPUT
          else
            echo "repo_name=YourMedia-Docs" >> $GITHUB_OUTPUT
          fi

      - name: Transfer Issue with GitHub Script
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const targetRepo = '${{ steps.repo-selector.outputs.repo_name }}';
            const issueNumber = context.payload.issue.number;

            try {
              await github.rest.issues.transfer({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                new_owner: 'YourMedia-Cloud',
                new_repo: targetRepo
              });
              console.log(`Successfully transferred issue #${issueNumber} to YourMedia-Cloud/${targetRepo}`);
            } catch (error) {
              console.error(`Error transferring issue: ${error.message}`);
              core.setFailed(error.message);
            }

  # Gestion des pull requests
  process-pull-requests:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Move PR to project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: "https://github.com/orgs/YourMedia-Cloud/projects/1"
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}

      - name: Set PR status
        id: set-status
        run: |
          if [ "${{ github.event.action }}" == "review_requested" ]; then
            echo "status=Review" >> $GITHUB_ENV
          elif [ "${{ github.event.action }}" == "closed" ] && [ "${{ github.event.pull_request.merged }}" == "true" ]; then
            echo "status=Done" >> $GITHUB_ENV
          else
            echo "status=To Do" >> $GITHUB_ENV
          fi

      - name: Update PR Status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            // Script pour mettre à jour le statut de la PR
            // Remplacez project_id et colonne_id par vos valeurs réelles
            const projectId = 'PROJECT_ID';
            const columnIds = {
              'To Do': 'TODO_COLUMN_ID',
              'Review': 'REVIEW_COLUMN_ID',
              'Done': 'DONE_COLUMN_ID'
            };

            // Cette partie nécessiterait l'API GraphQL de GitHub pour être implémentée correctement
            console.log(`Updating PR status to: ${{ env.status }}`);

      - name: Close linked issue when PR is merged
        if: github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const prBody = context.payload.pull_request.body || '';
            const match = prBody.match(/Closes #(\d+)/);

            if (match && match[1]) {
              const issueNumber = match[1];
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed'
              });
              console.log(`Closed issue #${issueNumber}`);
            }
