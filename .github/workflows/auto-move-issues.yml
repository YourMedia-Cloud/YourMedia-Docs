name: Auto Move Issues & PRs in Project Board

on:
  issues:
    types: [opened, labeled]
  pull_request:
    types: [opened, review_requested, closed]

jobs:
  # ðŸ”¹ Gestion des issues - Projet principal
  process-issues:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # RÃ©cupÃ©rer tout l'historique

      - name: Debug - Liste des fichiers
        run: ls -la .github/workflows

      - name: Move issue to main project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: "https://github.com/orgs/YourMedia-Cloud/projects/1"
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}

  # ðŸ”¹ Gestion des issues spÃ©cifiques Ã  l'infrastructure
  process-infra-issues:
    needs: process-issues
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'infra')
    runs-on: ubuntu-latest
    steps:
      - name: Move issue to Infrastructure project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: "https://github.com/orgs/YourMedia-Cloud/projects/2"
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}

  # ðŸ”¹ Gestion des Pull Requests
  process-pull-requests:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # RÃ©cupÃ©rer tout l'historique

      - name: Debug - Liste des fichiers
        run: ls -la .github/workflows

      - name: VÃ©rification existence de project-config.json
        run: |
          if [ -f ".github/workflows/project-config.json" ]; then
            echo "project-config.json trouvÃ©"
            cat .github/workflows/project-config.json
          else
            echo "project-config.json introuvable !"
            exit 1
          fi

      - name: Move PR to project
        uses: actions/add-to-project@v0.5.0
        with:
          project-url: "https://github.com/orgs/YourMedia-Cloud/projects/1"
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}

      - name: Set PR status
        id: set-status
        run: |
          if [ "${{ github.event.action }}" == "review_requested" ]; then
            echo "status=Review" >> $GITHUB_ENV
          elif [ "${{ github.event.action }}" == "closed" ] && [ "${{ github.event.pull_request.merged }}" == "true" ]; then
            echo "status=Done" >> $GITHUB_ENV
          elif [ "${{ github.event.action }}" == "opened" ]; then
            echo "status=In Progress" >> $GITHUB_ENV
          else
            echo "status=Todo" >> $GITHUB_ENV
          fi

      - name: Lire la configuration du projet
        id: project-config
        run: |
          CONFIG=$(jq -c . < .github/workflows/project-config.json)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT

      - name: Update PR Status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const config = JSON.parse(`${{ steps.project-config.outputs.config }}`);
            const statusName = process.env.status || 'Todo';
            const statusMapping = config.statusMapping || {};
            const statusOptions = config.statusValues || {};
            const projectStatus = statusMapping[statusName] || statusName;
            let statusOptionId = statusOptions[projectStatus] || statusOptions['Todo'];
            console.log(`ðŸ”„ Updating PR status to: ${projectStatus}`);

            try {
              const projectQuery = `query {
                organization(login: "${context.repo.owner}") {
                  projectV2(number: ${config.projectNumber}) {
                    id
                  }
                }
              }`;
              const projectData = await github.graphql(projectQuery);
              const projectId = projectData.organization.projectV2.id;

              const itemQuery = `query {
                organization(login: "${context.repo.owner}") {
                  projectV2(number: ${config.projectNumber}) {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on PullRequest {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }`;
              const itemsData = await github.graphql(itemQuery);
              const items = itemsData.organization.projectV2.items.nodes;
              const prNumber = context.payload.pull_request.number;

              let itemId = null;
              for (const item of items) {
                if (item.content && item.content.number === prNumber) {
                  itemId = item.id;
                  break;
                }
              }

              if (!itemId) {
                console.log(`PR #${prNumber} not found in project board.`);
                return;
              }

              const mutation = `mutation {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: "${projectId}",
                    itemId: "${itemId}",
                    fieldId: "${config.statusField}",
                    value: { singleSelectOptionId: "${statusOptionId}" }
                  }
                ) {
                  projectV2Item { id }
                }
              }`;

              await github.graphql(mutation);
              console.log(`PR #${prNumber} status updated to ${projectStatus}`);

            } catch (error) {
              console.error(`Error updating PR status: ${error.message}`);
              core.setFailed(error.message);
            }

      - name: Close linked issue when PR is merged
        if: github.event.action == 'closed' && github.event.pull_request.merged == true
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            const prBody = context.payload.pull_request.body || '';
            const match = prBody.match(/Closes #(\d+)/);
            if (match && match[1]) {
              const issueNumber = match[1];
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                state: 'closed'
              });
              console.log(`âœ… Closed issue #${issueNumber}`);
            }
